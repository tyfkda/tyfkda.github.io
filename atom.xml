<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2025-06-20T12:51:58.192Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【C++】shared_ptrとOpenMPの相性が最悪な件</title>
    <link href="https://tyfkda.github.io/blog/2025/06/20/openmp-shared_ptr.html"/>
    <id>https://tyfkda.github.io/blog/2025/06/20/openmp-shared_ptr.html</id>
    <published>2025-06-20T13:00:00.000Z</published>
    <updated>2025-06-20T12:51:58.192Z</updated>
    
    
    <summary type="html">&lt;p&gt;久しぶりにC++でプログラムを書いて、その時に生ポインタの代わりに&lt;code&gt;shared_ptr&lt;/code&gt;を使うように変更したところとんでもなく遅くなってしまうことがあり、導入できなかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cplusplus" scheme="https://tyfkda.github.io/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>PBRマテリアルでパストレーシングしてみた！(Disney Principled BRDF)</title>
    <link href="https://tyfkda.github.io/blog/2025/06/06/pbr-material-pathtracer.html"/>
    <id>https://tyfkda.github.io/blog/2025/06/06/pbr-material-pathtracer.html</id>
    <published>2025-06-06T12:00:00.000Z</published>
    <updated>2025-06-07T02:05:10.166Z</updated>
    
    
    <summary type="html">&lt;p&gt;いかにもCGで作りましたっていうクッキリハッキリした反射ではなく、少し不完全な金属の光沢や表面のざらざら具合を表現するためのマテリアル表現をパストレーサーに組み込んでみた。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/pbr-material-pt/image-ggx.jpg&quot; alt=&quot;PBRマテリアルでパストレーシング&quot;&gt;&lt;/p&gt;
&lt;p&gt;640x480, 25,000サンプル&amp;#x2F;ピクセル, 39.03秒, M1MacbookAir (8コア)&lt;/p&gt;</summary>
    
    
    
    
    <category term="graphics" scheme="https://tyfkda.github.io/tags/graphics/"/>
    
  </entry>
  
  <entry>
    <title>Viteに移行してみたら開発環境が快適になった</title>
    <link href="https://tyfkda.github.io/blog/2025/03/13/vite-build-tool.html"/>
    <id>https://tyfkda.github.io/blog/2025/03/13/vite-build-tool.html</id>
    <published>2025-03-13T09:00:00.000Z</published>
    <updated>2025-05-14T02:26:04.310Z</updated>
    
    
    <summary type="html">&lt;p&gt;ずっと以前から&lt;a href=&quot;/blog/2015/12/10/gulp-es6.html&quot; title=&quot;gulp+ES6でフロントエンド開発&quot;&gt;Gulpなど&lt;/a&gt;やWebpackを使ってブラウザ上で動くウェブアプリを作っていたが、&lt;a href=&quot;https://ja.vitejs.dev/&quot;&gt;Vite&lt;/a&gt;に載せ替えてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="https://tyfkda.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mach-Oを力任せに解析＆再現、Macの実行ファイルを自作しちゃる！</title>
    <link href="https://tyfkda.github.io/blog/2025/03/08/macho-exe.html"/>
    <id>https://tyfkda.github.io/blog/2025/03/08/macho-exe.html</id>
    <published>2025-03-08T03:00:00.000Z</published>
    <updated>2025-03-24T03:01:06.526Z</updated>
    
    
    <summary type="html">&lt;style&gt;
.code-container {
  /* height: 600px;
  overflow-y: scroll; */
  overflow-y: hidden;
  overflow-x: scroll;
  border: 1px solid black;
  border-radius: 8px;
}
.gist ::selection {
  color: white !important;
  background-color: green !important;
}

.gist table tr {
  background-color: rgba(220,220,220,0.2) !important;
}
.blob-num {
  display: none;
}
.gist-meta {
  display: none;
}
.gist-file {
  border-bottom: none !important;
}
table.highlight tr td,table.highlight tr td span {
  font-size: 15px !important;
  font-family: &quot;SFMono-Regular&quot;,Consolas,&quot;Liberation Mono&quot;,Menlo,Courier,monospace !important;
}
.gist tr:first-child td {
  padding-top: 12px !important;
}
.gist tr:last-child td {
  padding-bottom: 12px !important;
}
&lt;/style&gt;

&lt;p&gt;自作したリンカーはELFは扱えるがMacOSで使われるMach-O形式には対応できてない。
Mach-Oの実行ファイルも自分で生成できるようになればリンカーにも適用できて嬉しい。
なので調べてみようという試み。&lt;/p&gt;
&lt;p&gt;環境：Apple M1(aarch64), macOS Sequoia 15.3.1, Apple clang version 16.0.0&lt;/p&gt;</summary>
    
    
    
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>SSA形式を実装してみた！力技で挑むコンパイラ最適化の獣道</title>
    <link href="https://tyfkda.github.io/blog/2025/03/01/ssa-intro.html"/>
    <id>https://tyfkda.github.io/blog/2025/03/01/ssa-intro.html</id>
    <published>2025-03-01T10:00:00.000Z</published>
    <updated>2025-03-24T03:01:06.534Z</updated>
    
    
    <summary type="html">&lt;p&gt;趣味でコンパイラのバックエンドを作っているが現状最適化はほとんどできてない。
最適化をしやすくするために静的単一代入を導入しようとして手間取っているのでメモ
（力任せに実装しただけなので真偽は不明です）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="optimization" scheme="https://tyfkda.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>再帰下降法にさよなら！Prattパーサーで式解析を簡単かつ効果的に！</title>
    <link href="https://tyfkda.github.io/blog/2025/02/01/pratt-parser.html"/>
    <id>https://tyfkda.github.io/blog/2025/02/01/pratt-parser.html</id>
    <published>2025-02-01T08:00:00.000Z</published>
    <updated>2025-04-05T06:27:09.953Z</updated>
    
    
    <summary type="html">&lt;p&gt;今までコンパイラでの式のパーサーに再帰下降法を使ってたが、&lt;a href=&quot;/blog/2019/12/22/crafting-interpreters.html&quot; title=&quot;Crafting Interpretersを読んだ&quot;&gt;Crafting Interpretersという本&lt;/a&gt;（以降CI本）でPrattパーサーという手法があることを知った。
本では加えて直接バイトコードを生成しているため「文法に制限がある」みたいなことが書かれていたのを混同して不安があったが、
試しにC言語の式のパースに使ってみて問題なく使えることがわかったのでもう今後は再帰下降法を使うのはやめるようPrattパーサーを布教したい。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>激ムズの「ゼリーのパズル」を全面クリアする！（A＊法）</title>
    <link href="https://tyfkda.github.io/blog/2025/01/13/jelly-solver.html"/>
    <id>https://tyfkda.github.io/blog/2025/01/13/jelly-solver.html</id>
    <published>2025-01-13T10:00:00.000Z</published>
    <updated>2025-03-26T08:07:18.896Z</updated>
    
    
    <summary type="html">&lt;p&gt;「&lt;strong&gt;ゼリーのパズル&lt;/strong&gt;」というパズルゲームを初めてやった時は初期のステージからあまりの難しさに悶絶した。
それだけに解けたときの満足感は半端ない。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
    <category term="puzzle" scheme="https://tyfkda.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>【WebGPU】floatテクスチャにフィルタを使用したい場合</title>
    <link href="https://tyfkda.github.io/blog/2024/12/11/webgpu-f32tex-filter.html"/>
    <id>https://tyfkda.github.io/blog/2024/12/11/webgpu-f32tex-filter.html</id>
    <published>2024-12-11T13:00:00.000Z</published>
    <updated>2025-03-24T03:01:06.538Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前&lt;a href=&quot;/blog/2023/10/10/webgpu-reaction-diffusion.html&quot; title=&quot;WebGPUで反応拡散系&quot;&gt;WebGPUで反応拡散系&lt;/a&gt;を動かした時にテクスチャのサンプルにフィルタが使えなかった理由がわかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
  <entry>
    <title>スーパーマリオの強化学習を動かす（Stable Baselines 3）</title>
    <link href="https://tyfkda.github.io/blog/2024/08/07/smb-rl-sb3.html"/>
    <id>https://tyfkda.github.io/blog/2024/08/07/smb-rl-sb3.html</id>
    <published>2024-08-07T03:00:00.000Z</published>
    <updated>2025-04-05T06:27:06.823Z</updated>
    
    
    <summary type="html">&lt;p&gt;PyTorchのチュートリアルにファミコンのスーパーマリオを使った強化学習があってずっと昔に試した時にはGoogle Colab上で動かせたはずなんだけど、
今ではライブラリのインストールで競合してバージョンの不整合でエラーが出たりして動かせない。
なんとか動かしたかったのでローカルで起動できるようやってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nes" scheme="https://tyfkda.github.io/tags/nes/"/>
    
    <category term="reinforcement learning" scheme="https://tyfkda.github.io/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>Mach-Oオブジェクト形式を生成してみる</title>
    <link href="https://tyfkda.github.io/blog/2024/06/15/mach-o.html"/>
    <id>https://tyfkda.github.io/blog/2024/06/15/mach-o.html</id>
    <published>2024-06-15T09:00:00.000Z</published>
    <updated>2025-03-24T03:01:06.525Z</updated>
    
    
    <summary type="html">&lt;p&gt;Linuxなどの実行ファイルやコンパイラから出力されるオブジェクトファイルはELFという形式だが、
macOSでは&lt;strong&gt;Mach-O&lt;/strong&gt;という別のフォーマットが使われている。
このフォーマットを学んでみる、
要するに&lt;a href=&quot;/blog/2020/04/20/elf-obj.html&quot; title=&quot;ELFのオブジェクトファイル形式を生成する&quot;&gt;ELFのオブジェクトファイル形式を生成する&lt;/a&gt;をMach-O&amp;#x2F;aarch64上でやってみる。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
</feed>
