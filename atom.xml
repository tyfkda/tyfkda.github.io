<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2022-10-12T09:26:54.946Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WASI上でのファイルオープンに悪戦苦闘した話</title>
    <link href="https://tyfkda.github.io/blog/2022/10/12/wasi-lack-info.html"/>
    <id>https://tyfkda.github.io/blog/2022/10/12/wasi-lack-info.html</id>
    <published>2022-10-12T09:00:00.000Z</published>
    <updated>2022-10-12T09:26:54.946Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tyfkda/xcc&quot;&gt;自作Cコンパイラ&lt;/a&gt;から出力するWASMのバイナリコードをWASIに準拠させたいが、WASIのAPIに関する情報が探せずに困ってる、というはなし。&lt;/p&gt;</summary>
    
    
    
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>【C++】static_castとreinterpret_cast、またdynamic_castの違い</title>
    <link href="https://tyfkda.github.io/blog/2022/10/05/cpp-cast.html"/>
    <id>https://tyfkda.github.io/blog/2022/10/05/cpp-cast.html</id>
    <published>2022-10-05T03:00:00.000Z</published>
    <updated>2022-10-05T06:22:47.601Z</updated>
    
    
    <summary type="html">&lt;p&gt;C++のキャストについてあまりよく知らなかったので調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cplusplus" scheme="https://tyfkda.github.io/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>M1Mac向けにコンパイルする</title>
    <link href="https://tyfkda.github.io/blog/2022/09/29/cc-aarch64.html"/>
    <id>https://tyfkda.github.io/blog/2022/09/29/cc-aarch64.html</id>
    <published>2022-09-29T06:00:00.000Z</published>
    <updated>2022-10-11T01:14:03.545Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tyfkda/xcc&quot;&gt;自作しているCコンパイラ&lt;/a&gt;ではx86-64のアセンブリを出力していたが、
ノートパソコンを近年のMacBookAirにしたところCPUアーキテクチャが違うためコンパイル結果を動かせなくなってしまった。
そこでバックエンドとしてaarch64を追加した。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>【C】プリプロセッサのマクロ展開アルゴリズム</title>
    <link href="https://tyfkda.github.io/blog/2022/09/18/pp-macro-expand.html"/>
    <id>https://tyfkda.github.io/blog/2022/09/18/pp-macro-expand.html</id>
    <published>2022-09-17T23:00:00.000Z</published>
    <updated>2022-09-17T23:03:02.118Z</updated>
    
    
    <summary type="html">&lt;p&gt;C言語のプリプロセッサを自作して簡単なマクロは扱えていたが、
いろいろなソースを食わせてみたところうまく展開できないケースがあったので修正した。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="c" scheme="https://tyfkda.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>【CSS】アスペクト比を保持したまま長辺をフィットさせる</title>
    <link href="https://tyfkda.github.io/blog/2022/09/16/css-object-fit.html"/>
    <id>https://tyfkda.github.io/blog/2022/09/16/css-object-fit.html</id>
    <published>2022-09-16T07:00:00.000Z</published>
    <updated>2022-09-16T08:12:04.193Z</updated>
    
    
    <summary type="html">&lt;p&gt;アスペクト比を保持したままキャンバスをブラウザ一杯に、長辺が収まるようにスケールさせたかったので調べた。&lt;/p&gt;
&lt;p&gt;答え： CSSの &lt;code&gt;object-fit: contain&lt;/code&gt; を使う&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/qoj28ytu/25/&quot;&gt;デモ(JSFiddle)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="html" scheme="https://tyfkda.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Unreal EngineのC++プロジェクトを試してみる</title>
    <link href="https://tyfkda.github.io/blog/2022/07/29/ue5-cpp.html"/>
    <id>https://tyfkda.github.io/blog/2022/07/29/ue5-cpp.html</id>
    <published>2022-07-29T07:31:11.000Z</published>
    <updated>2022-09-15T12:12:17.370Z</updated>
    
    
    <summary type="html">&lt;p&gt;Unreal Engineのブループリントを使った簡単なサンプルの作り方はわかったので、C++も使えるようになろうと試してみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unreal" scheme="https://tyfkda.github.io/tags/unreal/"/>
    
  </entry>
  
  <entry>
    <title>Unreal Engineの入門</title>
    <link href="https://tyfkda.github.io/blog/2022/07/07/ue5-first-game.html"/>
    <id>https://tyfkda.github.io/blog/2022/07/07/ue5-first-game.html</id>
    <published>2022-07-07T03:00:00.000Z</published>
    <updated>2022-09-15T11:29:54.527Z</updated>
    
    
    <summary type="html">&lt;p&gt;今までもUnreal Engineを使えるようになりたいと思っていたけど、&lt;a href=&quot;https://www.youtube.com/watch?v=WU0gvPcc3jQ&quot;&gt;Matrix Awakensのデモ動画&lt;/a&gt; を見てちょっとこれは凄すぎて次元が違う、使えるようにならないと取り残されると危機感を持った。&lt;/p&gt;
&lt;p&gt;使用バージョン： Unreal Engine 5.0.2&lt;/p&gt;</summary>
    
    
    
    
    <category term="unreal" scheme="https://tyfkda.github.io/tags/unreal/"/>
    
  </entry>
  
  <entry>
    <title>アーカイブファイルのフォーマット</title>
    <link href="https://tyfkda.github.io/blog/2022/06/28/archive-format.html"/>
    <id>https://tyfkda.github.io/blog/2022/06/28/archive-format.html</id>
    <published>2022-06-28T05:00:00.000Z</published>
    <updated>2022-06-28T08:10:29.098Z</updated>
    
    
    <summary type="html">&lt;a href=&quot;/blog/2022/03/13/elf-linker.html&quot; title=&quot;リンカーを自作した&quot;&gt;リンカーを自作した&lt;/a&gt;際に入力としてELFのオブジェクトファイル(.o)を受け付けるようにしていたが、それだけだとライブラリの扱いで無駄が生じるのでアーカイブファイル(.a)も入力できるようにした。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【VSCode】Ctrl-mで決定する</title>
    <link href="https://tyfkda.github.io/blog/2022/05/29/vscode-return2.html"/>
    <id>https://tyfkda.github.io/blog/2022/05/29/vscode-return2.html</id>
    <published>2022-05-29T00:00:00.000Z</published>
    <updated>2022-05-31T12:10:05.875Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;以前&lt;a href=&quot;/blog/2022/01/28/vscode-return.html&quot; title=&quot;【VSCode】Ctrl-mで改行入力&quot;&gt;VSCodeで改行の入力にCtrl-mを使えるように&lt;/a&gt;設定したが、クイックオープンなどで効かないのでまだ不便だった。</summary>
      
    
    
    
    
    <category term="texteditor" scheme="https://tyfkda.github.io/tags/texteditor/"/>
    
  </entry>
  
  <entry>
    <title>転移学習で手書きのひらがな・漢字認識</title>
    <link href="https://tyfkda.github.io/blog/2022/05/26/hira-kan-recog.html"/>
    <id>https://tyfkda.github.io/blog/2022/05/26/hira-kan-recog.html</id>
    <published>2022-05-26T03:00:00.000Z</published>
    <updated>2022-06-06T04:02:21.508Z</updated>
    
    
    <summary type="html">&lt;a href=&quot;/blog/2016/08/17/tensorflow-cnn.html&quot; title=&quot;TensorFlowでひらがな・漢字文字認識&quot;&gt;だいぶ以前&lt;/a&gt;にディープラーニング（CNN）で文字認識を試したことがあったが、学習のワークフローなどをまとめたいと思っているうちに時が流れて、ソースが失われてしまった。
&lt;p&gt;そのまま葬り去られてしまうのは惜しいので供養（再挑戦）してみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="machine learning" scheme="https://tyfkda.github.io/tags/machine-learning/"/>
    
  </entry>
  
</feed>
