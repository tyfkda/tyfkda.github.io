<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2025-01-14T00:43:56.909Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「ゼリーのパズル」ソルバーを作る（A＊）</title>
    <link href="https://tyfkda.github.io/blog/2025/01/13/jelly-solver.html"/>
    <id>https://tyfkda.github.io/blog/2025/01/13/jelly-solver.html</id>
    <published>2025-01-13T10:00:00.000Z</published>
    <updated>2025-01-14T00:43:56.909Z</updated>
    
    
    <summary type="html">&lt;p&gt;「&lt;strong&gt;ゼリーのパズル&lt;/strong&gt;」というパズルゲームを初めてやった時は初期のステージからあまりの難しさに悶絶した。
それだけに解けたときの満足感は半端ない。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
    <category term="puzzle" scheme="https://tyfkda.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>【WebGPU】floatテクスチャにフィルタを使用したい場合</title>
    <link href="https://tyfkda.github.io/blog/2024/12/11/webgpu-f32tex-filter.html"/>
    <id>https://tyfkda.github.io/blog/2024/12/11/webgpu-f32tex-filter.html</id>
    <published>2024-12-11T13:00:00.000Z</published>
    <updated>2024-12-16T02:54:41.090Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前&lt;a href=&quot;/blog/2023/10/10/webgpu-reaction-diffusion.html&quot; title=&quot;WebGPUで反応拡散系&quot;&gt;WebGPUで反応拡散系&lt;/a&gt;を動かした時にテクスチャのサンプルにフィルタが使えなかった理由がわかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
  <entry>
    <title>スーパーマリオの強化学習を動かす（Stable Baselines 3）</title>
    <link href="https://tyfkda.github.io/blog/2024/08/07/smb-rl-sb3.html"/>
    <id>https://tyfkda.github.io/blog/2024/08/07/smb-rl-sb3.html</id>
    <published>2024-08-07T03:00:00.000Z</published>
    <updated>2024-12-16T02:54:43.502Z</updated>
    
    
    <summary type="html">&lt;p&gt;PyTorchのチュートリアルにファミコンのスーパーマリオを使った強化学習があってずっと昔に試した時にはGoogle Colab上で動かせたはずなんだけど、
今ではライブラリのインストールで競合してバージョンの不整合でエラーが出たりして動かせない。
なんとか動かしたかったのでローカルで起動できるようやってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nes" scheme="https://tyfkda.github.io/tags/nes/"/>
    
    <category term="reinforcement learning" scheme="https://tyfkda.github.io/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>Mach-Oオブジェクト形式を生成してみる</title>
    <link href="https://tyfkda.github.io/blog/2024/06/15/mach-o.html"/>
    <id>https://tyfkda.github.io/blog/2024/06/15/mach-o.html</id>
    <published>2024-06-15T09:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.578Z</updated>
    
    
    <summary type="html">&lt;p&gt;Linuxなどの実行ファイルやコンパイラから出力されるオブジェクトファイルはELFという形式だが、
macOSでは&lt;strong&gt;Mach-O&lt;/strong&gt;という別のフォーマットが使われている。
このフォーマットを学んでみる、
要するに&lt;a href=&quot;/blog/2020/04/20/elf-obj.html&quot; title=&quot;ELFのオブジェクトファイル形式を生成する&quot;&gt;ELFのオブジェクトファイル形式を生成する&lt;/a&gt;をMach-O&amp;#x2F;aarch64上でやってみる。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>強化学習に再挑戦（二重倒立振子）</title>
    <link href="https://tyfkda.github.io/blog/2024/05/31/reinforce-invert-double-pendulum.html"/>
    <id>https://tyfkda.github.io/blog/2024/05/31/reinforce-invert-double-pendulum.html</id>
    <published>2024-05-31T09:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.581Z</updated>
    
    
    <summary type="html">&lt;p&gt;流行りの機械学習でなにか動かしたいなぁとチュートリアルを動かそうとするも大抵エラーで動かない、動いたとしてもちょっと経つとライブラリの更新だか環境の変化でエラーになってしまい、その依存関係も解決できない。
ローカルで動かそうとするが環境構築でつまずく。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://tyfkda.github.io/tags/python/"/>
    
    <category term="reinforcement learning" scheme="https://tyfkda.github.io/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>モンテカルロ木探索で引き分け狙いのコネクトフォーAIを作ろうとしたがうまくいかなかった話</title>
    <link href="https://tyfkda.github.io/blog/2024/04/09/mcts-connect-four.html"/>
    <id>https://tyfkda.github.io/blog/2024/04/09/mcts-connect-four.html</id>
    <published>2024-04-09T12:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.579Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gihyo.jp/book/2023/978-4-297-13360-3&quot;&gt;ゲームで学ぶ探索アルゴリズム実践入門
～木探索とメタヒューリスティクス&lt;/a&gt;という本の中でコネクトフォーの思考ルーチンをモンテカルロ木探索で実装するサンプルがあったので動かしてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>折れ線にフィットするベジェ曲線を求める方法</title>
    <link href="https://tyfkda.github.io/blog/2024/03/12/fit-curve.html"/>
    <id>https://tyfkda.github.io/blog/2024/03/12/fit-curve.html</id>
    <published>2024-03-12T09:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.576Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前に調べた&lt;a href=&quot;/blog/2020/10/26/simplify-line-segments.html&quot; title=&quot;折れ線を簡略化する方法(Ramer-Douglas-Peucker法)&quot;&gt;折れ線を簡略化する方法&lt;/a&gt;は線分の途中の点を省いて軽量化する方法で、線分のままだった。
それとは違い、曲線を当てはめるアルゴリズムを調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>【WASM】オブジェクトフォーマットとその実装方法</title>
    <link href="https://tyfkda.github.io/blog/2024/02/05/wasm-obj-format.html"/>
    <id>https://tyfkda.github.io/blog/2024/02/05/wasm-obj-format.html</id>
    <published>2024-02-05T12:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.585Z</updated>
    
    
    <summary type="html">&lt;p&gt;WASMのバイナリフォーマットは実行用の情報しかないのでコンパイルの中間ファイル・リンク用には別途独自のファイル形式が必要かと思ってたんだけど、どうやら追加の情報を加えることで対応してるらしい。
そこで使い方を探った。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>Roseスクリーンセーバーを再現</title>
    <link href="https://tyfkda.github.io/blog/2024/01/27/rose-screen-saver.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/27/rose-screen-saver.html</id>
    <published>2024-01-27T10:00:00.000Z</published>
    <updated>2024-09-02T01:47:27.581Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;iframe src=&quot;https://openprocessing.org/sketch/2158350/embed/&quot; width=&quot;90%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="cg" scheme="https://tyfkda.github.io/tags/cg/"/>
    
    <category term="processing" scheme="https://tyfkda.github.io/tags/processing/"/>
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Monacoエディタで内容が変更されたかどうか調べる</title>
    <link href="https://tyfkda.github.io/blog/2024/01/15/monaco-editor-is-modified.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/15/monaco-editor-is-modified.html</id>
    <published>2024-01-15T09:00:00.000Z</published>
    <updated>2024-12-11T23:45:32.265Z</updated>
    
    
    <summary type="html">&lt;p&gt;結論：&lt;a href=&quot;https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.ITextModel.html#getAlternativeVersionId&quot;&gt;getAlternativeVersionId()&lt;/a&gt;で判定できる。&lt;/p&gt;</summary>
    
    
    
    
    <category term="texteditor" scheme="https://tyfkda.github.io/tags/texteditor/"/>
    
  </entry>
  
</feed>
