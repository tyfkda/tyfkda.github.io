<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2023-12-02T12:08:41.514Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【WebGPU】全方位影と映り込みと</title>
    <link href="https://tyfkda.github.io/blog/2023/11/29/paraboloid-shadow-envmap.html"/>
    <id>https://tyfkda.github.io/blog/2023/11/29/paraboloid-shadow-envmap.html</id>
    <published>2023-11-29T09:00:00.000Z</published>
    <updated>2023-12-02T12:08:41.514Z</updated>
    
    
    <summary type="html">&lt;p&gt;WebGPUでレンダリング手法を学習するシリーズ、&lt;a href=&quot;/blog/2023/11/09/deferred-shadow-mapping.html&quot; title=&quot;【WebGPU】Deferred RenderingとShadow Mappingと&quot;&gt;前回ディファードレンダリング&lt;/a&gt;ではスポットライトで特定の方向にのみ影を投影していた。
それを点光源・全方位に拡張して、また環境マッピングもやってみることにした。&lt;/p&gt;
&lt;p&gt;点光源で全方位に影を投影しようとした場合、単純に考えると角度が90度の四角錐を上下左右前後の6方向に行えばできるが、
点光源１つにつきシーンを6回レンダリングする必要があるというのは厳しいように思う。
しかし&lt;strong&gt;放物面&lt;/strong&gt;の特性を使うと半球をカバーできるため2面でいけるということを知ったので、やってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cg" scheme="https://tyfkda.github.io/tags/cg/"/>
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
  <entry>
    <title>【WebGPU】Deferred RenderingとShadow Mappingと</title>
    <link href="https://tyfkda.github.io/blog/2023/11/09/deferred-shadow-mapping.html"/>
    <id>https://tyfkda.github.io/blog/2023/11/09/deferred-shadow-mapping.html</id>
    <published>2023-11-09T10:00:00.000Z</published>
    <updated>2023-12-03T10:37:03.605Z</updated>
    
    
    <summary type="html">&lt;a href=&quot;/blog/2023/10/10/webgpu-reaction-diffusion.html&quot; title=&quot;WebGPUで反応拡散系&quot;&gt;WebGPUを触ってみて&lt;/a&gt;、一応Computeシェーダーは使えるようになった。
&lt;p&gt;「次のステップ」としてチュートリアルに書かれていた&lt;a href=&quot;https://webgpu.github.io/webgpu-samples/&quot;&gt;WebGPU Samples&lt;/a&gt;の中で、&lt;a href=&quot;https://webgpu.github.io/webgpu-samples/samples/deferredRendering&quot;&gt;Deferred Rendering&lt;/a&gt;が気になったので、ソースを読んでみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cg" scheme="https://tyfkda.github.io/tags/cg/"/>
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
  <entry>
    <title>WebGPUで反応拡散系</title>
    <link href="https://tyfkda.github.io/blog/2023/10/10/webgpu-reaction-diffusion.html"/>
    <id>https://tyfkda.github.io/blog/2023/10/10/webgpu-reaction-diffusion.html</id>
    <published>2023-10-10T07:00:00.000Z</published>
    <updated>2023-11-30T04:59:41.525Z</updated>
    
    
    <summary type="html">&lt;p&gt;ずっと昔に&lt;a href=&quot;/tags/webgl/&quot;&gt;WebGL&lt;/a&gt;を触ってみたことがあったのだけど初期化が面倒で放置になってしまった。
近頃（というか今年の前半に）WebGPUというものが使えるようになったということを聞いたので、再挑戦を込めてようやく触ってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
  <entry>
    <title>【Unreal Engine】機能別サンプルでブループリント間でやりとりする方法を見てみる</title>
    <link href="https://tyfkda.github.io/blog/2023/09/03/ue-content-examples.html"/>
    <id>https://tyfkda.github.io/blog/2023/09/03/ue-content-examples.html</id>
    <published>2023-09-03T04:00:00.000Z</published>
    <updated>2023-11-10T10:31:21.774Z</updated>
    
    
    <summary type="html">&lt;p&gt;Unreal Engineの基本的な知識があまりないので、機能紹介も兼ねている機能別サンプルの&lt;a href=&quot;https://docs.unrealengine.com/4.27/ja/Resources/ContentExamples/Blueprints/&quot;&gt;ブループリント通信&lt;/a&gt;の中身を見て、複数のブループリント間でどうやってやりとりしたらいいのか見てみた
（要はカスタムイベント、イベントディスパッチャー、ブループリントインターフェース）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unreal" scheme="https://tyfkda.github.io/tags/unreal/"/>
    
  </entry>
  
  <entry>
    <title>【C】printfに独自の表示形式を追加する</title>
    <link href="https://tyfkda.github.io/blog/2023/08/29/customize-printf.html"/>
    <id>https://tyfkda.github.io/blog/2023/08/29/customize-printf.html</id>
    <published>2023-08-29T06:00:00.000Z</published>
    <updated>2023-11-10T10:31:21.771Z</updated>
    
    
    <summary type="html">&lt;p&gt;C言語でプログラムを書いていると&lt;code&gt;printf&lt;/code&gt;で文字列を出力する中に自分で定義した構造体の内容を埋め込みたいことがたまにある。
ふつうにやるには&lt;code&gt;printf&lt;/code&gt;を途中で分割して間で自前の出力ルーチンを呼び出してやることになるが、見通しが悪くなる。
しかしカスタマイズする方法があるということで使ってみた。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;gcc拡張で、標準ではない&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="c" scheme="https://tyfkda.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>コンパイラでもっとレジスタを活用するために行った対策</title>
    <link href="https://tyfkda.github.io/blog/2023/08/25/backend-more-registers.html"/>
    <id>https://tyfkda.github.io/blog/2023/08/25/backend-more-registers.html</id>
    <published>2023-08-25T10:00:00.000Z</published>
    <updated>2023-11-30T05:22:13.042Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tyfkda/xcc&quot;&gt;自作のCコンパイラ&lt;/a&gt;ではLLVMなどのバックエンドを使わずにx86-64やaarch64のアセンブリコードを直接出力しているが、
出力するコードでより多くのCPUレジスタを使えるように改良した。
他にも不要にメモリ（スタック）操作をしていたのを対策した。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="optimization" scheme="https://tyfkda.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Makefileでソースディレクトリを分けてる場合のターゲットの記述方法（foreach, eval）</title>
    <link href="https://tyfkda.github.io/blog/2023/07/31/make-foreach-eval.html"/>
    <id>https://tyfkda.github.io/blog/2023/07/31/make-foreach-eval.html</id>
    <published>2023-07-31T09:00:00.000Z</published>
    <updated>2023-11-10T10:31:21.772Z</updated>
    
    
    <summary type="html">&lt;p&gt;Makefileでビルドを管理する場合にソースディレクトリを分けていると同じ記述を何度もするのが煩わしかったが、
まとめる方法があることを知った。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>arcsinを数値計算する方法を探し求めて彷徨う</title>
    <link href="https://tyfkda.github.io/blog/2023/07/17/calc-asin.html"/>
    <id>https://tyfkda.github.io/blog/2023/07/17/calc-asin.html</id>
    <published>2023-07-17T06:00:00.000Z</published>
    <updated>2023-11-10T10:31:21.771Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前数学関数を自前で実装する一環で&lt;a href=&quot;/blog/2020/12/30/fp-compiler.html&quot; title=&quot;コンパイラを浮動小数点数に対応させる（それと数学関数を実装）&quot;&gt;atanは実装した&lt;/a&gt;が、欠けていた逆三角関数&lt;code&gt;asin&lt;/code&gt;を実装したかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Ten Minute Physicsを動かしてみる</title>
    <link href="https://tyfkda.github.io/blog/2023/06/25/10-minute-physics.html"/>
    <id>https://tyfkda.github.io/blog/2023/06/25/10-minute-physics.html</id>
    <published>2023-06-25T10:00:00.000Z</published>
    <updated>2023-11-10T10:31:10.303Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://matthias-research.github.io/pages/tenMinutePhysics/index.html&quot;&gt;Ten Minute Physics&lt;/a&gt;という、スクラッチで物理シミュレーションを作るというページがあったので一通り動かしてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="physics" scheme="https://tyfkda.github.io/tags/physics/"/>
    
  </entry>
  
  <entry>
    <title>【Haskell】リストをある幅で分割する、そのためにどれほどの夜を重ねただろう</title>
    <link href="https://tyfkda.github.io/blog/2023/06/04/split-by-width.html"/>
    <id>https://tyfkda.github.io/blog/2023/06/04/split-by-width.html</id>
    <published>2023-06-04T08:00:00.000Z</published>
    <updated>2023-11-10T10:31:10.313Z</updated>
    
    
    <summary type="html">&lt;p&gt;例えば２次元配列を扱う際に計算中は１次元に展開して持っておいて、出力時に戻そうとしたときに、リストを固定の長さで分割して二重（２次元）リストにして返す、ということがしたかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="haskell" scheme="https://tyfkda.github.io/tags/haskell/"/>
    
  </entry>
  
</feed>
