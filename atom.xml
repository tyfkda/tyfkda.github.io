<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2024-05-31T09:59:23.119Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>強化学習に再挑戦（二重倒立振子）</title>
    <link href="https://tyfkda.github.io/blog/2024/05/31/reinforce-invert-double-pendulum.html"/>
    <id>https://tyfkda.github.io/blog/2024/05/31/reinforce-invert-double-pendulum.html</id>
    <published>2024-05-31T09:00:00.000Z</published>
    <updated>2024-05-31T09:59:23.119Z</updated>
    
    
    <summary type="html">&lt;p&gt;流行りの機械学習でなにか動かしたいなぁとチュートリアルを動かそうとするも大抵エラーで動かない、動いたとしてもちょっと経つとライブラリの更新だか環境の変化でエラーになってしまい、その依存関係も解決できない。
ローカルで動かそうとするが環境構築でつまずく。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://tyfkda.github.io/tags/python/"/>
    
    <category term="reinforcement learning" scheme="https://tyfkda.github.io/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>モンテカルロ木探索で引き分け狙いのコネクトフォーAIを作ろうとしたがうまくいかなかった話</title>
    <link href="https://tyfkda.github.io/blog/2024/04/09/mcts-connect-four.html"/>
    <id>https://tyfkda.github.io/blog/2024/04/09/mcts-connect-four.html</id>
    <published>2024-04-09T12:00:00.000Z</published>
    <updated>2024-04-29T03:12:51.404Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gihyo.jp/book/2023/978-4-297-13360-3&quot;&gt;ゲームで学ぶ探索アルゴリズム実践入門
～木探索とメタヒューリスティクス&lt;/a&gt;という本の中でコネクトフォーの試行ルーチンをモンテカルロ木探索で実装するサンプルがあったので動かしてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>折れ線にフィットするベジェ曲線を求める方法</title>
    <link href="https://tyfkda.github.io/blog/2024/03/12/fit-curve.html"/>
    <id>https://tyfkda.github.io/blog/2024/03/12/fit-curve.html</id>
    <published>2024-03-12T09:00:00.000Z</published>
    <updated>2024-05-02T02:41:06.825Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前に調べた&lt;a href=&quot;/blog/2020/10/26/simplify-line-segments.html&quot; title=&quot;折れ線を簡略化する方法(Ramer-Douglas-Peucker法)&quot;&gt;折れ線を簡略化する方法&lt;/a&gt;は線分の途中の点を省いて軽量化する方法で、線分のままだった。
それとは違い、曲線を当てはめるアルゴリズムを調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>【WASM】オブジェクトフォーマットとその実装方法</title>
    <link href="https://tyfkda.github.io/blog/2024/02/05/wasm-obj-format.html"/>
    <id>https://tyfkda.github.io/blog/2024/02/05/wasm-obj-format.html</id>
    <published>2024-02-05T12:00:00.000Z</published>
    <updated>2024-05-03T10:48:14.822Z</updated>
    
    
    <summary type="html">&lt;p&gt;WASMのバイナリフォーマットは実行用の情報しかないのでコンパイルの中間ファイル・リンク用には別途独自のファイル形式が必要かと思ってたんだけど、どうやら追加の情報を加えることで対応してるらしい。
そこで使い方を探った。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>Roseスクリーンセーバーを再現</title>
    <link href="https://tyfkda.github.io/blog/2024/01/27/rose-screen-saver.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/27/rose-screen-saver.html</id>
    <published>2024-01-27T10:00:00.000Z</published>
    <updated>2024-04-24T02:00:18.078Z</updated>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;iframe src=&quot;https://openprocessing.org/sketch/2158350/embed/&quot; width=&quot;90%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="cg" scheme="https://tyfkda.github.io/tags/cg/"/>
    
    <category term="processing" scheme="https://tyfkda.github.io/tags/processing/"/>
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Monacoエディタで内容が変更されたかどうか調べる</title>
    <link href="https://tyfkda.github.io/blog/2024/01/15/monaco-editor-is-modified.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/15/monaco-editor-is-modified.html</id>
    <published>2024-01-15T09:00:00.000Z</published>
    <updated>2024-04-24T02:00:18.074Z</updated>
    
    
    <summary type="html">&lt;p&gt;結論：&lt;a href=&quot;https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.ITextModel.html#getAlternativeVersionId&quot;&gt;getAlternativeVersionId()&lt;/a&gt;で判定できる。&lt;/p&gt;</summary>
    
    
    
    
    <category term="texteditor" scheme="https://tyfkda.github.io/tags/texteditor/"/>
    
  </entry>
  
  <entry>
    <title>Monacoエディタを組み込んでみる</title>
    <link href="https://tyfkda.github.io/blog/2024/01/14/monaco-editor-intro.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/14/monaco-editor-intro.html</id>
    <published>2024-01-14T09:00:00.000Z</published>
    <updated>2024-04-24T02:00:18.074Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前はブラウザ上で動くテキストエディタとして&lt;a href=&quot;https://ace.c9.io/&quot;&gt;Aceエディタ&lt;/a&gt;を使ってみたが、自分が普段使うエディタはほぼVSCodeになってしまったので、ブラウザでも同じ方が自分にとって望ましい。
VSCodeは&lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco&lt;/a&gt;というオープンソースで公開されているので、使い方を調べてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="texteditor" scheme="https://tyfkda.github.io/tags/texteditor/"/>
    
  </entry>
  
  <entry>
    <title>箱入り娘パズルを解く（幅優先探索）</title>
    <link href="https://tyfkda.github.io/blog/2024/01/09/hakoiri-solver.html"/>
    <id>https://tyfkda.github.io/blog/2024/01/09/hakoiri-solver.html</id>
    <published>2024-01-09T09:00:00.000Z</published>
    <updated>2024-04-29T03:12:51.400Z</updated>
    
    
    <summary type="html">&lt;p&gt;以前&lt;a href=&quot;/blog/2023/05/12/pentomino-solver.html&quot; title=&quot;ペントミノパズルを解く（深さ優先探索法、Dancing Links法）&quot;&gt;ペントミノパズルを解くプログラムを書いた&lt;/a&gt;ことでいろいろ学ぶことがあったので、今度は箱入り娘を解くプログラムを書いてみた。&lt;/p&gt;
&lt;img src=&quot;/assets/hakoiri.png&quot; alt=&quot;箱入り娘の想像図&quot; style=&quot;filter:drop-shadow(0 0 8px black)&quot;&gt;

&lt;p&gt;&lt;small style=&quot;color:gray&quot;&gt;※画像はイメージです（ソルバーは単にコマンドラインで動くだけ）&lt;/small&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="puzzle" scheme="https://tyfkda.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>自作CコンパイラをRISC-Vに対応した</title>
    <link href="https://tyfkda.github.io/blog/2023/12/22/cc-riscv.html"/>
    <id>https://tyfkda.github.io/blog/2023/12/22/cc-riscv.html</id>
    <published>2023-12-22T10:00:00.000Z</published>
    <updated>2024-04-29T03:12:51.385Z</updated>
    
    
    <summary type="html">&lt;p&gt;RISC-VというCPUはライセンスフリーとのことでどんなもんか興味あって、そんなこともあり自作のCコンパイラをRISC-Vに対応したいと思っていた。
そのために動かせる環境を用意したくて、最初はQEMUなどのエミュレータでLinuxを動かして…と思っていたが、spikeというシミュレータを使うことで実現した。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
    <category term="binary" scheme="https://tyfkda.github.io/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>【WebGPU】全方位影と映り込みと</title>
    <link href="https://tyfkda.github.io/blog/2023/11/29/paraboloid-shadow-envmap.html"/>
    <id>https://tyfkda.github.io/blog/2023/11/29/paraboloid-shadow-envmap.html</id>
    <published>2023-11-29T09:00:00.000Z</published>
    <updated>2024-04-24T02:00:18.075Z</updated>
    
    
    <summary type="html">&lt;p&gt;WebGPUでレンダリング手法を学習するシリーズ、&lt;a href=&quot;/blog/2023/11/09/deferred-shadow-mapping.html&quot; title=&quot;【WebGPU】Deferred RenderingとShadow Mappingと&quot;&gt;前回ディファードレンダリング&lt;/a&gt;ではスポットライトで特定の方向にのみ影を投影していた。
それを点光源・全方位に拡張して、また環境マッピングもやってみることにした。&lt;/p&gt;
&lt;p&gt;点光源で全方位に影を投影しようとした場合、単純に考えると角度が90度の四角錐を上下左右前後の6方向に行えばできるが、
点光源１つにつきシーンを6回レンダリングする必要があるというのは厳しいように思う。
しかし&lt;strong&gt;放物面&lt;/strong&gt;の特性を使うと半球をカバーできるため2面でいけるということを知ったので、やってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cg" scheme="https://tyfkda.github.io/tags/cg/"/>
    
    <category term="webgpu" scheme="https://tyfkda.github.io/tags/webgpu/"/>
    
  </entry>
  
</feed>
