<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2023-03-16T23:21:23.191Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ruby.wasmを使ってみる</title>
    <link href="https://tyfkda.github.io/blog/2023/03/16/ruby-wasm-quickstart.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/16/ruby-wasm-quickstart.html</id>
    <published>2023-03-16T12:00:00.000Z</published>
    <updated>2023-03-16T23:21:23.191Z</updated>
    
    
    <summary type="html">&lt;p&gt;その昔JavaScriptがあまり好きではなくて、「ブラウザでもRubyでスクリプト書きてぇ〜！」などと思っていた。
その後JavaScriptにもだいぶ慣れたのでそういうこともなくなったが、最近ではwasm化されて動かせるとのことなので触ってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ruby" scheme="https://tyfkda.github.io/tags/ruby/"/>
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>【Rust】委譲に使えるクレート(Ambassador)</title>
    <link href="https://tyfkda.github.io/blog/2023/03/14/rust-delegation-ambassador.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/14/rust-delegation-ambassador.html</id>
    <published>2023-03-14T13:00:00.000Z</published>
    <updated>2023-03-14T12:43:08.727Z</updated>
    
    
    <summary type="html">&lt;p&gt;Rustでは継承が使えないが委譲をするにしてもグルーコードを書く必要があって面倒と思ってた（&lt;a href=&quot;/blog/2020/09/27/composition-over-inheritance.html&quot; title=&quot;「継承より合成（委譲）」について&quot;&gt;「継承より合成（委譲）」について&lt;/a&gt;）んだけど、とあるコードを見ていたら&lt;a href=&quot;https://crates.io/crates/ambassador&quot;&gt;ambassador&lt;/a&gt;というクレートを使っていた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="rust" scheme="https://tyfkda.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>【WebAudio】スペクトラムアナライザーを作る</title>
    <link href="https://tyfkda.github.io/blog/2023/03/11/spectrum-analyzer.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/11/spectrum-analyzer.html</id>
    <published>2023-03-11T03:00:00.000Z</published>
    <updated>2023-03-11T23:06:55.045Z</updated>
    
    
    <summary type="html">&lt;p&gt;音楽に合わせてバーが動く、スペクトラムアナライザー（またの名をグラフィックイコライザー、通称グライコ）をずっとやってみたかった。
WebAudioを使えば音楽の再生やスペクトラム解析に必要なFFT計算も簡単に利用できるのでやってみた
（ハードウェアではなくソフトウェアで）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="audio" scheme="https://tyfkda.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>【JupyterLab】コールバックでセル出力を書き換える方法</title>
    <link href="https://tyfkda.github.io/blog/2023/03/05/jupyterlab-output.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/05/jupyterlab-output.html</id>
    <published>2023-03-05T08:30:00.000Z</published>
    <updated>2023-03-05T08:36:16.407Z</updated>
    
    
    <summary type="html">&lt;p&gt;表題の通り、JupyterLab でボタンによる操作などのコールバックで、セル出力を更新する場合の方法。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【WASM】例外を扱う</title>
    <link href="https://tyfkda.github.io/blog/2023/02/10/wasm-try-catch.html"/>
    <id>https://tyfkda.github.io/blog/2023/02/10/wasm-try-catch.html</id>
    <published>2023-02-10T10:00:00.000Z</published>
    <updated>2023-02-10T10:59:29.072Z</updated>
    
    
    <summary type="html">&lt;p&gt;WASMは通常の制御フローしかなくて大域ジャンプはできないものかと思い込んでいたが、例外も使えるということを知ったのでどんなもんか調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>定数による整数除算の高速化【論文読み】</title>
    <link href="https://tyfkda.github.io/blog/2023/01/30/division-by-invariant-integers.html"/>
    <id>https://tyfkda.github.io/blog/2023/01/30/division-by-invariant-integers.html</id>
    <published>2023-01-30T09:00:00.000Z</published>
    <updated>2023-02-01T14:20:41.687Z</updated>
    
    
    <summary type="html">&lt;p&gt;コンパイル結果を見ていた時にソースでは除算を使っているのに出力されたコードには使われていなかったことがあり、どういう仕組みかを調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>floor関数を実装する</title>
    <link href="https://tyfkda.github.io/blog/2023/01/15/floor-impl.html"/>
    <id>https://tyfkda.github.io/blog/2023/01/15/floor-impl.html</id>
    <published>2023-01-15T03:00:00.000Z</published>
    <updated>2023-02-01T14:20:04.418Z</updated>
    
    
    <summary type="html">&lt;p&gt;C言語の数学関数の &lt;code&gt;floor&lt;/code&gt; を自前で実装するにはどうするか。&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="https://tyfkda.github.io/tags/algorithm/"/>
    
    <category term="math" scheme="https://tyfkda.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>【2022末】初めての自作PC</title>
    <link href="https://tyfkda.github.io/blog/2022/12/20/homebuilt-computer.html"/>
    <id>https://tyfkda.github.io/blog/2022/12/20/homebuilt-computer.html</id>
    <published>2022-12-20T03:00:00.000Z</published>
    <updated>2022-12-21T11:03:24.621Z</updated>
    
    
    <summary type="html">&lt;p&gt;初めてPCを自作したのでメモっておく。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【C】可変長引数の回避と引数の数による関数の呼び分け</title>
    <link href="https://tyfkda.github.io/blog/2022/11/23/open-impl.html"/>
    <id>https://tyfkda.github.io/blog/2022/11/23/open-impl.html</id>
    <published>2022-11-23T10:00:00.000Z</published>
    <updated>2022-11-24T04:26:03.719Z</updated>
    
    
    <summary type="html">&lt;p&gt;例えばPOSIXの &lt;code&gt;open&lt;/code&gt; 関数は引数を2つ、または3つ与える形になっている。
このような関数を自作C言語上で実装する場合に可変長引数を使用すると、内部的に引数をスタック上にストアして取り出す処理が行われるため、コストがかかってしまう。
それを回避する方法を考える。&lt;/p&gt;</summary>
    
    
    
    
    <category term="c" scheme="https://tyfkda.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>WASI上でのファイルオープンに悪戦苦闘した話</title>
    <link href="https://tyfkda.github.io/blog/2022/10/12/wasi-lack-info.html"/>
    <id>https://tyfkda.github.io/blog/2022/10/12/wasi-lack-info.html</id>
    <published>2022-10-12T09:00:00.000Z</published>
    <updated>2022-11-08T02:40:58.794Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tyfkda/xcc&quot;&gt;自作Cコンパイラ&lt;/a&gt;から出力するWASMのバイナリコードをWASIに準拠させたいが、WASIのAPIに関する情報が探せずに困ってる、というはなし。&lt;/p&gt;</summary>
    
    
    
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
</feed>
