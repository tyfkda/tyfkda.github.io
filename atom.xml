<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kludge Factory</title>
  
  <subtitle>tyfkda&#39;s blog</subtitle>
  <link href="https://tyfkda.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyfkda.github.io/"/>
  <updated>2023-06-04T08:51:43.973Z</updated>
  <id>https://tyfkda.github.io/</id>
  
  <author>
    <name>tyfkda</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Haskell】リストをある幅で分割する、そのためにどれほどの夜を重ねただろう</title>
    <link href="https://tyfkda.github.io/blog/2023/06/04/split-by-width.html"/>
    <id>https://tyfkda.github.io/blog/2023/06/04/split-by-width.html</id>
    <published>2023-06-04T08:00:00.000Z</published>
    <updated>2023-06-04T08:51:43.973Z</updated>
    
    
    <summary type="html">&lt;p&gt;例えば２次元配列を扱う際に計算中は１次元に展開して持っておいて、出力時に戻そうとしたときに、リストを固定の長さで分割して二重（２次元）リストにして返す、ということがしたかった。&lt;/p&gt;</summary>
    
    
    
    
    <category term="haskell" scheme="https://tyfkda.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>ペントミノパズルを解く（深さ優先探索法、Dancing Links法）</title>
    <link href="https://tyfkda.github.io/blog/2023/05/12/pentomino-solver.html"/>
    <id>https://tyfkda.github.io/blog/2023/05/12/pentomino-solver.html</id>
    <published>2023-05-12T10:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.844Z</updated>
    
    
    <summary type="html">&lt;p&gt;頭の体操と余興として、ペントミノ（５つの四角形）を並べて長方形を作るパズルを解くプログラムを書いてみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="puzzle" scheme="https://tyfkda.github.io/tags/puzzle/"/>
    
  </entry>
  
  <entry>
    <title>TypeScriptをWebPackでTreeShakingするにはmoduleをes6にする＋α</title>
    <link href="https://tyfkda.github.io/blog/2023/04/24/webpack-tree-shaking-ts.html"/>
    <id>https://tyfkda.github.io/blog/2023/04/24/webpack-tree-shaking-ts.html</id>
    <published>2023-04-24T10:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.849Z</updated>
    
    
    <summary type="html">&lt;p&gt;TypeScriptでコードを書いて、ブラウザで動かすためにWebPackでまとめてるアプリで、Worklet用に別に出力しているソースに不要なコードも含まれてしまってサイズが大きくなってしまっていた。
「Worklet側でも&lt;code&gt;import&lt;/code&gt;されるコードをソースを手動で分離するか〜」と思ったが、&lt;strong&gt;TreeShaking&lt;/strong&gt;という機能でできるということなのでやってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="typescript" scheme="https://tyfkda.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>【WASM】WASIランタイム（JS用）が混沌としている</title>
    <link href="https://tyfkda.github.io/blog/2023/04/23/wasi-runtime-js.html"/>
    <id>https://tyfkda.github.io/blog/2023/04/23/wasi-runtime-js.html</id>
    <published>2023-04-23T08:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.848Z</updated>
    
    
    <summary type="html">&lt;p&gt;WASI用に出力されたWebAssemblyバイナリをJS上で動かすためのランタイムを探ったが混沌としていた。
できればコマンドライン(node.js)からとブラウザ上の両方で動くといいんだけど、決定版みたいなものが現状ないように見える。&lt;/p&gt;</summary>
    
    
    
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>浮動小数点数とポインタを混在させるテクニック（NaN Boxing）</title>
    <link href="https://tyfkda.github.io/blog/2023/04/22/nan-boxing.html"/>
    <id>https://tyfkda.github.io/blog/2023/04/22/nan-boxing.html</id>
    <published>2023-04-22T12:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.843Z</updated>
    
    
    <summary type="html">&lt;p&gt;動的言語内で扱う値の内部表現に関する最適化で、NaN Boxingという方法を知ったのでメモ。&lt;/p&gt;</summary>
    
    
    
    
    <category term="compiler" scheme="https://tyfkda.github.io/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>ファミコンのDMCチャンネルの再現方法</title>
    <link href="https://tyfkda.github.io/blog/2023/04/06/nes-apu-dmc.html"/>
    <id>https://tyfkda.github.io/blog/2023/04/06/nes-apu-dmc.html</id>
    <published>2023-04-05T15:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.843Z</updated>
    
    
    <summary type="html">&lt;p&gt;ファミコンは音楽を鳴らす機能として矩形波×2、三角波、ノイズというシンプルな方法に加えて、&lt;strong&gt;DMCというサンプリング音源による方法&lt;/strong&gt;がある。
そんな機能が搭載されてたこと自体も驚きだが、サンプリング音源なんて容量制限が厳しくて使ってるゲームなんてほとんどないでしょと後回しにしてたんだが、後期の豪華なゲームでは結構使われているので再現する方法を調べた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nes" scheme="https://tyfkda.github.io/tags/nes/"/>
    
    <category term="audio" scheme="https://tyfkda.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>映画『Winny』に出てくるED法</title>
    <link href="https://tyfkda.github.io/blog/2023/03/28/winny-movie.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/28/winny-movie.html</id>
    <published>2023-03-28T09:00:00.000Z</published>
    <updated>2023-04-01T03:30:25.143Z</updated>
    
    
    <summary type="html">&lt;p&gt;Winnyについては特に思い入れはないんだけど、&lt;a href=&quot;https://winny-movie.com/&quot;&gt;映画&lt;/a&gt;の予告編が面白そうだったので見てきた。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【Rust】不変参照から可変参照に変換する（未定義動作ではない（けど安全でもない））方法</title>
    <link href="https://tyfkda.github.io/blog/2023/03/20/ref-to-mut-ref.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/20/ref-to-mut-ref.html</id>
    <published>2023-03-20T09:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.844Z</updated>
    
    
    <summary type="html">&lt;p&gt;Rustで参照から可変参照を拝借するにはワイルドに &lt;code&gt;unsafe&lt;/code&gt;を使うことになるんだけど（悪かった自慢）、&lt;a href=&quot;https://doc.rust-lang.org/clippy/&quot;&gt;Clippy&lt;/a&gt;にかけたら未定義動作だと言って怒られたので修正する。&lt;/p&gt;</summary>
    
    
    
    
    <category term="rust" scheme="https://tyfkda.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>【JavaScript】switch-caseで「これ以上これ以下」にマッチさせる</title>
    <link href="https://tyfkda.github.io/blog/2023/03/19/js-case-range.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/19/js-case-range.html</id>
    <published>2023-03-19T01:00:00.000Z</published>
    <updated>2023-06-01T08:17:25.842Z</updated>
    
    
    <summary type="html">&lt;p&gt;JavaScriptの&lt;code&gt;case&lt;/code&gt;である範囲の値を指定できないかな〜と思ったらできるらしい。&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="https://tyfkda.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ruby.wasmを使ってみる</title>
    <link href="https://tyfkda.github.io/blog/2023/03/16/ruby-wasm-quickstart.html"/>
    <id>https://tyfkda.github.io/blog/2023/03/16/ruby-wasm-quickstart.html</id>
    <published>2023-03-16T12:00:00.000Z</published>
    <updated>2023-04-01T03:30:19.190Z</updated>
    
    
    <summary type="html">&lt;p&gt;その昔JavaScriptがあまり好きではなくて、「ブラウザでもRubyでスクリプト書きてぇ〜！」などと思っていた。
その後JavaScriptにもだいぶ慣れたのでそういうこともなくなったが、最近ではwasm化されて動かせるとのことなので触ってみた。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ruby" scheme="https://tyfkda.github.io/tags/ruby/"/>
    
    <category term="wasm" scheme="https://tyfkda.github.io/tags/wasm/"/>
    
  </entry>
  
</feed>
